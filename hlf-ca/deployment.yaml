# Source: hlf-ca/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hlf-ca
  labels:
    app: hlf-ca
    heritage: "Helm"
    release: "hlf-ca"
    chart: hlf-ca-1.2.3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hlf-ca
      release: hlf-ca
  # Ensure we allow our pod to be unavailable, so we can upgrade
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: hlf-ca
        heritage: "Helm"
        release: "hlf-ca"
        chart: hlf-ca-1.2.3
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: hlf-ca
        - name: ca-config
          configMap:
            name: hlf-ca--config    
      initContainers:
        - name: wait-for-db
          image: jwilder/dockerize
          imagePullPolicy: IfNotPresent 
          envFrom:
            - configMapRef:
                name: hlf-ca--db
          command: 
            - sh
            - -c
            - |
              if [ -n "$DB_TYPE" ]; then
                dockerize -wait tcp://$DB_HOST:$DB_PORT -timeout 30s && echo "Database $DB_TYPE on $DB_HOST:$DB_PORT is ready"
              fi
      containers:
        - name: ca
          image: "hyperledger/fabric-ca:1.4.3"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              if [ -n "$DB_TYPE" ]; then
                while [ -z ${DB_PASSWORD+x} ];
                do
                  echo "\033[0;31mDB_PASSWORD environmental variable must contain a value \033[0m"
                  sleep 60
                done

                case "$DB_TYPE" in
                  postgres)
                    export DB_DATASOURCE="host=${DB_HOST} port=${DB_PORT} user=${DB_USERNAME} password=${DB_PASSWORD} dbname=${DB_DATABASE} sslmode=${DB_SSL}";;
                  mysql)
                    export DB_DATASOURCE="${DB_USERNAME}:${DB_PASSWORD}@tcp(${DB_HOST}:${DB_PORT})/${DB_DATABASE}?parseTime=true" ;;
                  *)
                    echo "\033[0;31m Database type '$DB_TYPE' not supported\033[0m"; exit 1;;
                esac
              fi

              mkdir -p $FABRIC_CA_HOME
              cp /var/hyperledger/ca_config/ca.yaml $FABRIC_CA_HOME/fabric-ca-server-config.yaml
              sed -i "s|<<<ADMIN>>>|${CA_ADMIN}|g" ${FABRIC_CA_HOME}/fabric-ca-server-config.yaml
              sed -i "s|<<<ADMINPW>>>|${CA_PASSWORD}|g" $FABRIC_CA_HOME/fabric-ca-server-config.yaml
              sed -i "s|<<<DB_TYPE>>>|${DB_TYPE:-"sqlite3"}|g" $FABRIC_CA_HOME/fabric-ca-server-config.yaml
              sed -i "s|<<<DB_DATASOURCE>>>|${DB_DATASOURCE:-"fabric-ca-server.db"}|g" $FABRIC_CA_HOME/fabric-ca-server-config.yaml

              echo ">\033[0;35m fabric-ca-server start \033[0m"
              fabric-ca-server start
          envFrom:
            - secretRef:
                name: hlf-ca--ca
            - configMapRef:
                name: hlf-ca--db
            - configMapRef:
                name: hlf-ca--ca
          env:
          ports:
            - name: ca-port
              containerPort: 7054
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /cainfo
              port: 7054
          readinessProbe:
            httpGet:
              path: /cainfo
              port: 7054             
          volumeMounts:
            - name: data
              mountPath: /var/hyperledger
            - name: ca-config
              readOnly: true
              mountPath: /var/hyperledger/ca_config
          resources:
            {}
